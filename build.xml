<?xml version="1.0" encoding="UTF-8"?>
<project name="phpqaconfig" default="build">

    <!-- Path to QA executables downloaded by Composer -->
    <property name="toolsdir" value="${basedir}/vendor/bin/" />

    <!-- Path to common QA tool configuration files downloaded by Composer -->
    <property name="qaconfig" value="${basedir}/vendor/lovullo/phpqaconfig/" />

    <target name="build"
        depends="prepare,check_mergeconflicts,phplint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,phpdox"
        description=""/>

    <target name="clean"
        unless="clean.done"
        description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
        unless="prepare.done"
        depends="clean"
        description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="check_mergeconflicts" description="Check for merge conflict markers within the code.">
        <exec executable="grep"
            resultproperty="grep.returncode">
            <arg value="-Er" />
            <arg value="--exclude-dir=./vendor" />
            <arg value="^(&lt;&lt;&lt;&lt;&lt;&lt;&lt;|=======|&gt;&gt;&gt;&gt;&gt;&gt;&gt;)" />
            <arg value="." />
        </exec>

        <condition property="grep.foundconflicts">
            <equals arg1="${grep.returncode}" arg2="0" />
        </condition>

        <fail message="Merge conflict markers detected in committed code!" if="grep.foundconflicts"/>
    </target>

    <target name="composer" description="Install composer dependencies.">
        <exec dir="${basedir}"
            executable="composer"
            failonerror="true">
            <arg value="install" />
        </exec>
    </target>

    <target name="composer-ci" description="Install composer dependencies and generate an optimized autoloader.">
        <exec dir="${basedir}"
            executable="composer"
            failonerror="true">
            <arg value="install" />
            <arg value="-o" />
        </exec>
    </target>

    <target name="phplint" description="Perform syntax check of sourcecode files">
        <apply dir="${basedir}"
            executable="php"
            failonerror="true">
            <arg value="-l" />
            <fileset dir=".">
                <include name="**/*.php" />
                <exclude name="vendor/**/*" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phpunit"
        depends="prepare"
        description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" failonerror="true" />
    </target>

    <target name="pdepend"
        depends="prepare"
        description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg value="--ignore=vendor" />
            <arg path="." />
        </exec>
    </target>

    <target name="phpmd"
        description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg path="${qaconfig}phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci"
        depends="prepare"
        description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg path="${qaconfig}phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
        description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcs">
            <arg value="--standard=${qaconfig}LoVullo/phpcs.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=vendor/" />
            <arg path="." />
        </exec>
    </target>

    <target name="phpcs-ci"
        depends="prepare"
        description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=${qaconfig}LoVullo/phpcs.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=vendor/" />
            <arg path="." />
        </exec>
    </target>

    <target name="phpcpd"
        description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcpd">
            <arg value="--exclude" />
            <arg value="vendor" />
            <arg path="." />
        </exec>
    </target>

    <target name="phpcpd-ci"
        depends="prepare"
        description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcpd">
            <arg value="--log-pmd" />
            <arg path="${basedir}/build/logs/pmd-cpd.xml" />
            <arg value="--exclude" />
            <arg value="vendor" />
            <arg path="." />
        </exec>
    </target>

    <target name="phploc"
        description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg value="--exclude" />
            <arg value="vendor" />
            <arg path="." />
        </exec>
    </target>

    <target name="phploc-ci"
        depends="prepare"
        description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/logs/phploc.xml" />
            <arg value="--exclude" />
            <arg value="vendor" />
            <arg path="." />
        </exec>
    </target>

    <target name="phpdox"
        depends="phploc-ci,phpcs-ci,phpmd-ci"
        description="Generate project documentation using phpDox">
        <exec executable="${toolsdir}phpdox" dir="${basedir}/build">
            <arg value="-f" />
            <arg path="${qaconfig}phpdox.xml" />
        </exec>
    </target>
</project>

